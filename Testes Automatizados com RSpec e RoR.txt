Testes AutomatizadosUsando Ruby on Rails e RSpecRodrigo Maia Barros-------------------------------------------------------------------------Prefácio	Com o surgimento das metodologias ágeis e seu absurdo sucesso, algumas empresas “criaram” conceitos de agilidade para maquiar a desorganização que já existia, então pregaram a “queima de documentação” e usaram denominações para cargos (Scrum Master, Product Owner, etc), sem aumentar a preocupação com o cliente, qualidade do produto final, ou qualquer uma das ideias pregadas no Manifesto Ágil.	Quando abandonamos algumas documentações como Use Case ou Test Case,  não o fazemos por prazer, a ideia de não mais usá-las é por acreditar que sua atualização não será feita da forma que deveria, e termos documentos desatualizados é um problema sério que muitas empresas enfrentam. Os Testes Automatizados se mostraram ótimos aliados das organizações ágeis, documentando seu código, mantendo a implementação sempre de acordo com esta “documentação” e ainda ajudando no melhor layout da implementação de suas soluções.		Nas páginas a seguir mostrarei alguns “tipos” de testes automatizados, quando e como devem ser utilizados.-------------------------------------------------------------------------1) O que são?	Os testes automatizados surgiram para suprir uma necessidade básica no desenvolvimento de software, a mudança. Quando alteramos um código, os impactos no sistemas são os mais inesperados, por isso existem tantos documentos que nos “protegem” destes riscos, como a Matriz de Rastreabilidade.		Matriz de Rastreabilidade é “Uma tabela que liga os requisitos às suas origens e os rastreia durante todo o ciclo de vida do projeto. A utilização de uma matriz de rastreabilidade ajuda a garantir que cada requisito adiciona valor de negócio através da sua ligação aos objetivos de negócio e aos objetivos do projeto. Fornece um meio de rastreamento do início ao fim do ciclo de vida do projeto, ajudando a garantir que os requisitos aprovados na documentação sejam entregues no final do projeto. Finalmente, fornece uma estrutura de gerenciamento das mudanças do escopo do produto.“(Guia PMBOK 4ª Edição)	O “problema” da Matriz de Rastreabilidade, ou de qualquer outro documento que tenha a necessidade de ser mantido, é que este precisa ser atualizado. Arrisco dizer que um documento desatualizado é pior que não ter documentação alguma, pois ter o documento causa a sensação de segurança e a equipe acaba ficando mais confortável para fazer implementações ou refatorações.	“O QUE É REFATORAÇÃO, MARTIN FOWLER”xxxxxxxxxxImplementar Testes enquanto desenvolvo é caro, porém é muito mais barato que corrigir Bugs e melhorar a imagem com o cliente depois de uma dessas falhas o causou algum tipo de transtorno.“Inspecionar para previnir defeitos é bom; Inspecionar para encontrar defeitos é desperdício”-- Shigeo ShingoTipos de Teste AutomatizadoQuando e Quem deve fazer?xxxxxxxxx2) Um pouco de Ruby on Rails3) Montando o Ambiente3.1) Instalando o RSpec3.2) Suite de Testes3.3) RSpec + Rails4) Conhecendo o RSpec4.1) ExemplosUm “teste” em RSpec é chamado exemplo, nele descrevemos o comportamento de uma funcionalidade, informando conjuntos de parâmetros que façam com que o método testado assuma todos os comportamentos imagináveis e que testemos cada um desses comportamentos.A descrição de um exemplo deve ser clara e completa o suficiente para que o conjunto deles forneça a “documentação” daquela funcionalidade.xxxxxxxxxxxxxComo deixar um Exemplo "pendente"xxxxxxxxxxxxx
4.2) Describe4.3) Escopo de um Example4.4) Hooks4.5) Testes UnitáriosO que são?Expectativasshould, should_not4.6) Matchersxxxxxxxxxxxxxxxxxxbebe_truebe_falsebe_nilbe_instance_ofbe_achange << ver melhorequal e ==includematch=~ (cobrinha)raise_errorbe_* (empty, odd, procurar outros)have (have_key, have_value, have_exactly, have_at_least, have_at_most, have(:no))xxxxxxxxxxxxxxxx
5) Mocks e Stubsxxxxxxxxxxxxxxxxmock()mock(‘Blablabla’)stub()stub_chain()any_instance()with()and_return()exceptionobj.stub(:metodo).and_raise("Not implemented")expect { obj.metodo }.to raise_error("Not implemented")Message Expectationsshould_receive() ou should_not_receive()counts()with(any_args, anything)Message Expectations Ordenadasxxxxxxxxxxxxxxxx6) Testando Controllersassignsresponds7) Testando Modelsbe_valid()validates_presence_of()Factory Girl8) Code CoverageDefinição9) Testando Views10) TDD11) Testes de IntegraçãoCapybaraCucumber12) Integração ContínuaJenkins